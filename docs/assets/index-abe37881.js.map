{"version":3,"mappings":"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","names":["dashToPascalCase","str","segment","camelToDashCase","m","attachProps","node","newProps","oldProps","className","getClassName","name","eventName","eventNameLc","isCoveredByReact","syncEvent","classList","newClassProp","oldClassProp","currentClasses","arrayToMap","incomingPropClasses","oldPropClasses","finalClassNames","currentClass","s","eventNameSuffix","isSupported","element","newEventHandler","eventStore","oldEventHandler","e","arr","map","setRef","ref","value","mergeRefs","refs","createForwardRef","ReactComponent","displayName","forwardRef","props","React","__rest","this","t","p","i","createReactComponent","tagName","ReactComponentContext","manipulatePropsFunction","defineCustomElement","prevProps","_a","cProps","propsToPass","acc","type","forwardedRef","createElement","children","AvnDataGrid","AvnDataGridCell","AvnDataGridCheckbox","AvnDataGridRadio","AvnDataGridRow","NAMESPACE","scopeId","hostTagName","isSvgMode","queuePending","createTime","fnName","uniqueTime","key","measureText","HYDRATED_CSS","EMPTY_OBJ","SVG_NS","HTML_NS","isDef","v","isComplexType","o","queryNonceMetaTagContent","doc","_b","_c","h","nodeName","vnodeData","child","simple","lastSimple","vNodeChildren","walk","c","newVNode","classData","k","vnode","tag","text","Host","isHost","parsePropertyValue","propValue","propType","getElement","getHostRef","createEvent","flags","elm","detail","emitEvent","opts","ev","plt","rootAppliedStyles","registerStyle","cssText","allowCS","style","styles","supportsConstructableStylesheets","addStyle","styleContainerNode","cmpMeta","mode","hostElm","getScopeId","appliedStyles","styleElm","nonce","attachStyles","hostRef","endAttachStyles","cmp","setAccessor","memberName","oldValue","newValue","isSvg","isProp","isMemberInElement","ln","oldClasses","parseClassList","newClasses","win","isComplex","n","parseClassListRegex","updateElement","oldVnode","newVnode","oldVnodeAttrs","newVnodeAttrs","createElm","oldParentVNode","newParentVNode","childIndex","parentElm","childNode","addVnodes","before","parentVNode","vnodes","startIdx","endIdx","containerElm","removeVnodes","updateChildren","oldCh","newCh","oldStartIdx","newStartIdx","oldEndIdx","oldStartVnode","oldEndVnode","newEndIdx","newStartVnode","newEndVnode","isSameVnode","patch","leftVNode","rightVNode","oldVNode","oldChildren","newChildren","renderVdom","renderFnResults","rootVnode","propName","attribute","attachToAncestor","ancestorComponent","r","scheduleUpdate","isInitialLoad","writeTask","dispatchHooks","endSchedule","instance","promise","methodName","event","safeCall","then","updateComponent","endUpdate","rc","endRender","callRender","cb","childrenPromises","postUpdate","postUpdateComponent","consoleError","endPostUpdate","addHydratedFlag","appDidLoad","nextTick","who","method","arg","thenFn","getValue","setValue","newVal","oldVal","areBothNaN","didValueChange","watchMethods","watchMethodName","proxyComponent","Cstr","members","prototype","memberFlags","attrNameToPropName","attrName","_oldValue","_","initializeComponent","hmrVersionId","loadModule","endLoad","endNewInstance","fireConnectedCallback","endRegisterStyles","schedule","connectedCallback","endConnected","addHostEventListeners","disconnectedCallback","rmListener","bootstrapLazy","lazyBundles","options","endBootstrap","cmpTags","exclude","customElements","head","metaCharset","visibilityStyle","deferredConnectedCallbacks","appLoadFallback","isBootstrapping","lazyBundle","compactMeta","HostElement","self","registerHost","host","listeners","attachParentListeners","target","handler","hostListenerProxy","hostListenerOpts","hostRefs","registerInstance","lazyInstance","el","cmpModules","exportName","bundleId","module","__variableDynamicImportRuntimeHelper","importedModule","listener","promiseResolve","queueDomReads","queueDomWrites","queueTask","queue","write","flush","consume","a"],"sources":["../../../data-grid-react/dist/components/stencil-generated/react-component-lib/utils/case.js","../../../data-grid-react/dist/components/stencil-generated/react-component-lib/utils/attachProps.js","../../../data-grid-react/dist/components/stencil-generated/react-component-lib/utils/index.js","../../../data-grid-react/dist/components/stencil-generated/react-component-lib/createComponent.js","../../../data-grid-react/dist/components/stencil-generated/react-component-lib/createOverlayComponent.js","../../../data-grid-react/dist/components/stencil-generated/index.js","../../../data-grid/dist/esm/index-b9f5f8f6.js","../../../data-grid/loader/index.js"],"sourcesContent":["export const dashToPascalCase = (str) => str\n    .toLowerCase()\n    .split('-')\n    .map((segment) => segment.charAt(0).toUpperCase() + segment.slice(1))\n    .join('');\nexport const camelToDashCase = (str) => str.replace(/([A-Z])/g, (m) => `-${m[0].toLowerCase()}`);\n//# sourceMappingURL=case.js.map","import { camelToDashCase } from './case';\nexport const attachProps = (node, newProps, oldProps = {}) => {\n    if (node instanceof Element) {\n        const className = getClassName(node.classList, newProps, oldProps);\n        if (className !== '') {\n            node.className = className;\n        }\n        Object.keys(newProps).forEach((name) => {\n            if (name === 'children' ||\n                name === 'style' ||\n                name === 'ref' ||\n                name === 'class' ||\n                name === 'className' ||\n                name === 'forwardedRef') {\n                return;\n            }\n            if (name.indexOf('on') === 0 && name[2] === name[2].toUpperCase()) {\n                const eventName = name.substring(2);\n                const eventNameLc = eventName[0].toLowerCase() + eventName.substring(1);\n                if (!isCoveredByReact(eventNameLc)) {\n                    syncEvent(node, eventNameLc, newProps[name]);\n                }\n            }\n            else {\n                node[name] = newProps[name];\n                const propType = typeof newProps[name];\n                if (propType === 'string') {\n                    node.setAttribute(camelToDashCase(name), newProps[name]);\n                }\n            }\n        });\n    }\n};\nexport const getClassName = (classList, newProps, oldProps) => {\n    const newClassProp = newProps.className || newProps.class;\n    const oldClassProp = oldProps.className || oldProps.class;\n    const currentClasses = arrayToMap(classList);\n    const incomingPropClasses = arrayToMap(newClassProp ? newClassProp.split(' ') : []);\n    const oldPropClasses = arrayToMap(oldClassProp ? oldClassProp.split(' ') : []);\n    const finalClassNames = [];\n    currentClasses.forEach((currentClass) => {\n        if (incomingPropClasses.has(currentClass)) {\n            finalClassNames.push(currentClass);\n            incomingPropClasses.delete(currentClass);\n        }\n        else if (!oldPropClasses.has(currentClass)) {\n            finalClassNames.push(currentClass);\n        }\n    });\n    incomingPropClasses.forEach((s) => finalClassNames.push(s));\n    return finalClassNames.join(' ');\n};\nexport const isCoveredByReact = (eventNameSuffix) => {\n    if (typeof document === 'undefined') {\n        return true;\n    }\n    else {\n        const eventName = 'on' + eventNameSuffix;\n        let isSupported = eventName in document;\n        if (!isSupported) {\n            const element = document.createElement('div');\n            element.setAttribute(eventName, 'return;');\n            isSupported = typeof element[eventName] === 'function';\n        }\n        return isSupported;\n    }\n};\nexport const syncEvent = (node, eventName, newEventHandler) => {\n    const eventStore = node.__events || (node.__events = {});\n    const oldEventHandler = eventStore[eventName];\n    if (oldEventHandler) {\n        node.removeEventListener(eventName, oldEventHandler);\n    }\n    node.addEventListener(eventName, (eventStore[eventName] = function handler(e) {\n        if (newEventHandler) {\n            newEventHandler.call(this, e);\n        }\n    }));\n};\nconst arrayToMap = (arr) => {\n    const map = new Map();\n    arr.forEach((s) => map.set(s, s));\n    return map;\n};\n//# sourceMappingURL=attachProps.js.map","import React from 'react';\nexport const setRef = (ref, value) => {\n    if (typeof ref === 'function') {\n        ref(value);\n    }\n    else if (ref != null) {\n        ref.current = value;\n    }\n};\nexport const mergeRefs = (...refs) => {\n    return (value) => {\n        refs.forEach((ref) => {\n            setRef(ref, value);\n        });\n    };\n};\nexport const createForwardRef = (ReactComponent, displayName) => {\n    const forwardRef = (props, ref) => {\n        return React.createElement(ReactComponent, Object.assign({}, props, { forwardedRef: ref }));\n    };\n    forwardRef.displayName = displayName;\n    return React.forwardRef(forwardRef);\n};\nexport const defineCustomElement = (tagName, customElement) => {\n    if (customElement !== undefined && typeof customElements !== 'undefined' && !customElements.get(tagName)) {\n        customElements.define(tagName, customElement);\n    }\n};\nexport * from './attachProps';\nexport * from './case';\n//# sourceMappingURL=index.js.map","var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport React, { createElement } from 'react';\nimport { attachProps, camelToDashCase, createForwardRef, dashToPascalCase, isCoveredByReact, mergeRefs } from './utils';\nexport const createReactComponent = (tagName, ReactComponentContext, manipulatePropsFunction, defineCustomElement) => {\n    if (defineCustomElement !== undefined) {\n        defineCustomElement();\n    }\n    const displayName = dashToPascalCase(tagName);\n    const ReactComponent = class extends React.Component {\n        constructor(props) {\n            super(props);\n            this.setComponentElRef = (element) => {\n                this.componentEl = element;\n            };\n        }\n        componentDidMount() {\n            this.componentDidUpdate(this.props);\n        }\n        componentDidUpdate(prevProps) {\n            attachProps(this.componentEl, this.props, prevProps);\n        }\n        render() {\n            const _a = this.props, { children, forwardedRef, style, className, ref } = _a, cProps = __rest(_a, [\"children\", \"forwardedRef\", \"style\", \"className\", \"ref\"]);\n            let propsToPass = Object.keys(cProps).reduce((acc, name) => {\n                const value = cProps[name];\n                if (name.indexOf('on') === 0 && name[2] === name[2].toUpperCase()) {\n                    const eventName = name.substring(2).toLowerCase();\n                    if (typeof document !== 'undefined' && isCoveredByReact(eventName)) {\n                        acc[name] = value;\n                    }\n                }\n                else {\n                    const type = typeof value;\n                    if (type === 'string' || type === 'boolean' || type === 'number') {\n                        acc[camelToDashCase(name)] = value;\n                    }\n                }\n                return acc;\n            }, {});\n            if (manipulatePropsFunction) {\n                propsToPass = manipulatePropsFunction(this.props, propsToPass);\n            }\n            const newProps = Object.assign(Object.assign({}, propsToPass), { ref: mergeRefs(forwardedRef, this.setComponentElRef), style });\n            return createElement(tagName, newProps, children);\n        }\n        static get displayName() {\n            return displayName;\n        }\n    };\n    if (ReactComponentContext) {\n        ReactComponent.contextType = ReactComponentContext;\n    }\n    return createForwardRef(ReactComponent, displayName);\n};\n//# sourceMappingURL=createComponent.js.map","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { attachProps, dashToPascalCase, defineCustomElement, setRef } from './utils';\nexport const createOverlayComponent = (tagName, controller, customElement) => {\n    defineCustomElement(tagName, customElement);\n    const displayName = dashToPascalCase(tagName);\n    const didDismissEventName = `on${displayName}DidDismiss`;\n    const didPresentEventName = `on${displayName}DidPresent`;\n    const willDismissEventName = `on${displayName}WillDismiss`;\n    const willPresentEventName = `on${displayName}WillPresent`;\n    let isDismissing = false;\n    class Overlay extends React.Component {\n        constructor(props) {\n            super(props);\n            if (typeof document !== 'undefined') {\n                this.el = document.createElement('div');\n            }\n            this.handleDismiss = this.handleDismiss.bind(this);\n        }\n        static get displayName() {\n            return displayName;\n        }\n        componentDidMount() {\n            if (this.props.isOpen) {\n                this.present();\n            }\n        }\n        componentWillUnmount() {\n            if (this.overlay) {\n                this.overlay.dismiss();\n            }\n        }\n        handleDismiss(event) {\n            if (this.props.onDidDismiss) {\n                this.props.onDidDismiss(event);\n            }\n            setRef(this.props.forwardedRef, null);\n        }\n        shouldComponentUpdate(nextProps) {\n            if (this.overlay && nextProps.isOpen !== this.props.isOpen && nextProps.isOpen === false) {\n                isDismissing = true;\n            }\n            return true;\n        }\n        componentDidUpdate(prevProps) {\n            return __awaiter(this, void 0, void 0, function* () {\n                if (this.overlay) {\n                    attachProps(this.overlay, this.props, prevProps);\n                }\n                if (prevProps.isOpen !== this.props.isOpen && this.props.isOpen === true) {\n                    this.present(prevProps);\n                }\n                if (this.overlay && prevProps.isOpen !== this.props.isOpen && this.props.isOpen === false) {\n                    yield this.overlay.dismiss();\n                    isDismissing = false;\n                    this.forceUpdate();\n                }\n            });\n        }\n        present(prevProps) {\n            return __awaiter(this, void 0, void 0, function* () {\n                const _a = this.props, { children, isOpen, onDidDismiss, onDidPresent, onWillDismiss, onWillPresent } = _a, cProps = __rest(_a, [\"children\", \"isOpen\", \"onDidDismiss\", \"onDidPresent\", \"onWillDismiss\", \"onWillPresent\"]);\n                const elementProps = Object.assign(Object.assign({}, cProps), { ref: this.props.forwardedRef, [didDismissEventName]: this.handleDismiss, [didPresentEventName]: (e) => this.props.onDidPresent && this.props.onDidPresent(e), [willDismissEventName]: (e) => this.props.onWillDismiss && this.props.onWillDismiss(e), [willPresentEventName]: (e) => this.props.onWillPresent && this.props.onWillPresent(e) });\n                this.overlay = yield controller.create(Object.assign(Object.assign({}, elementProps), { component: this.el, componentProps: {} }));\n                setRef(this.props.forwardedRef, this.overlay);\n                attachProps(this.overlay, elementProps, prevProps);\n                yield this.overlay.present();\n            });\n        }\n        render() {\n            return ReactDOM.createPortal(this.props.isOpen || isDismissing ? this.props.children : null, this.el);\n        }\n    }\n    return React.forwardRef((props, ref) => {\n        return React.createElement(Overlay, Object.assign({}, props, { forwardedRef: ref }));\n    });\n};\n//# sourceMappingURL=createOverlayComponent.js.map","import { createReactComponent } from './react-component-lib';\nexport const AvnDataGrid = createReactComponent('avn-data-grid');\nexport const AvnDataGridCell = createReactComponent('avn-data-grid-cell');\nexport const AvnDataGridCheckbox = createReactComponent('avn-data-grid-checkbox');\nexport const AvnDataGridRadio = createReactComponent('avn-data-grid-radio');\nexport const AvnDataGridRow = createReactComponent('avn-data-grid-row');\nexport const AvnDataGridSortingButton = createReactComponent('avn-data-grid-sorting-button');\n//# sourceMappingURL=index.js.map","const NAMESPACE = 'data-grid';\n\n/**\n * Virtual DOM patching algorithm based on Snabbdom by\n * Simon Friis Vindum (@paldepind)\n * Licensed under the MIT License\n * https://github.com/snabbdom/snabbdom/blob/master/LICENSE\n *\n * Modified for Stencil's renderer and slot projection\n */\nlet scopeId;\nlet hostTagName;\nlet isSvgMode = false;\nlet queuePending = false;\nconst createTime = (fnName, tagName = '') => {\n    {\n        return () => {\n            return;\n        };\n    }\n};\nconst uniqueTime = (key, measureText) => {\n    {\n        return () => {\n            return;\n        };\n    }\n};\nconst HYDRATED_CSS = '{visibility:hidden}.hydrated{visibility:inherit}';\n/**\n * Default style mode id\n */\n/**\n * Reusable empty obj/array\n * Don't add values to these!!\n */\nconst EMPTY_OBJ = {};\n/**\n * Namespaces\n */\nconst SVG_NS = 'http://www.w3.org/2000/svg';\nconst HTML_NS = 'http://www.w3.org/1999/xhtml';\nconst isDef = (v) => v != null;\n/**\n * Check whether a value is a 'complex type', defined here as an object or a\n * function.\n *\n * @param o the value to check\n * @returns whether it's a complex type or not\n */\nconst isComplexType = (o) => {\n    // https://jsperf.com/typeof-fn-object/5\n    o = typeof o;\n    return o === 'object' || o === 'function';\n};\n/**\n * Helper method for querying a `meta` tag that contains a nonce value\n * out of a DOM's head.\n *\n * @param doc The DOM containing the `head` to query against\n * @returns The content of the meta tag representing the nonce value, or `undefined` if no tag\n * exists or the tag has no content.\n */\nfunction queryNonceMetaTagContent(doc) {\n    var _a, _b, _c;\n    return (_c = (_b = (_a = doc.head) === null || _a === void 0 ? void 0 : _a.querySelector('meta[name=\"csp-nonce\"]')) === null || _b === void 0 ? void 0 : _b.getAttribute('content')) !== null && _c !== void 0 ? _c : undefined;\n}\n/**\n * Production h() function based on Preact by\n * Jason Miller (@developit)\n * Licensed under the MIT License\n * https://github.com/developit/preact/blob/master/LICENSE\n *\n * Modified for Stencil's compiler and vdom\n */\n// export function h(nodeName: string | d.FunctionalComponent, vnodeData: d.PropsType, child?: d.ChildType): d.VNode;\n// export function h(nodeName: string | d.FunctionalComponent, vnodeData: d.PropsType, ...children: d.ChildType[]): d.VNode;\nconst h = (nodeName, vnodeData, ...children) => {\n    let child = null;\n    let simple = false;\n    let lastSimple = false;\n    const vNodeChildren = [];\n    const walk = (c) => {\n        for (let i = 0; i < c.length; i++) {\n            child = c[i];\n            if (Array.isArray(child)) {\n                walk(child);\n            }\n            else if (child != null && typeof child !== 'boolean') {\n                if ((simple = typeof nodeName !== 'function' && !isComplexType(child))) {\n                    child = String(child);\n                }\n                if (simple && lastSimple) {\n                    // If the previous child was simple (string), we merge both\n                    vNodeChildren[vNodeChildren.length - 1].$text$ += child;\n                }\n                else {\n                    // Append a new vNode, if it's text, we create a text vNode\n                    vNodeChildren.push(simple ? newVNode(null, child) : child);\n                }\n                lastSimple = simple;\n            }\n        }\n    };\n    walk(children);\n    if (vnodeData) {\n        {\n            const classData = vnodeData.className || vnodeData.class;\n            if (classData) {\n                vnodeData.class =\n                    typeof classData !== 'object'\n                        ? classData\n                        : Object.keys(classData)\n                            .filter((k) => classData[k])\n                            .join(' ');\n            }\n        }\n    }\n    const vnode = newVNode(nodeName, null);\n    vnode.$attrs$ = vnodeData;\n    if (vNodeChildren.length > 0) {\n        vnode.$children$ = vNodeChildren;\n    }\n    return vnode;\n};\n/**\n * A utility function for creating a virtual DOM node from a tag and some\n * possible text content.\n *\n * @param tag the tag for this element\n * @param text possible text content for the node\n * @returns a newly-minted virtual DOM node\n */\nconst newVNode = (tag, text) => {\n    const vnode = {\n        $flags$: 0,\n        $tag$: tag,\n        $text$: text,\n        $elm$: null,\n        $children$: null,\n    };\n    {\n        vnode.$attrs$ = null;\n    }\n    return vnode;\n};\nconst Host = {};\n/**\n * Check whether a given node is a Host node or not\n *\n * @param node the virtual DOM node to check\n * @returns whether it's a Host node or not\n */\nconst isHost = (node) => node && node.$tag$ === Host;\n/**\n * Parse a new property value for a given property type.\n *\n * While the prop value can reasonably be expected to be of `any` type as far as TypeScript's type checker is concerned,\n * it is not safe to assume that the string returned by evaluating `typeof propValue` matches:\n *   1. `any`, the type given to `propValue` in the function signature\n *   2. the type stored from `propType`.\n *\n * This function provides the capability to parse/coerce a property's value to potentially any other JavaScript type.\n *\n * Property values represented in TSX preserve their type information. In the example below, the number 0 is passed to\n * a component. This `propValue` will preserve its type information (`typeof propValue === 'number'`). Note that is\n * based on the type of the value being passed in, not the type declared of the class member decorated with `@Prop`.\n * ```tsx\n * <my-cmp prop-val={0}></my-cmp>\n * ```\n *\n * HTML prop values on the other hand, will always a string\n *\n * @param propValue the new value to coerce to some type\n * @param propType the type of the prop, expressed as a binary number\n * @returns the parsed/coerced value\n */\nconst parsePropertyValue = (propValue, propType) => {\n    // ensure this value is of the correct prop type\n    if (propValue != null && !isComplexType(propValue)) {\n        if (propType & 4 /* MEMBER_FLAGS.Boolean */) {\n            // per the HTML spec, any string value means it is a boolean true value\n            // but we'll cheat here and say that the string \"false\" is the boolean false\n            return propValue === 'false' ? false : propValue === '' || !!propValue;\n        }\n        if (propType & 1 /* MEMBER_FLAGS.String */) {\n            // could have been passed as a number or boolean\n            // but we still want it as a string\n            return String(propValue);\n        }\n        // redundant return here for better minification\n        return propValue;\n    }\n    // not sure exactly what type we want\n    // so no need to change to a different type\n    return propValue;\n};\nconst getElement = (ref) => (getHostRef(ref).$hostElement$ );\nconst createEvent = (ref, name, flags) => {\n    const elm = getElement(ref);\n    return {\n        emit: (detail) => {\n            return emitEvent(elm, name, {\n                bubbles: !!(flags & 4 /* EVENT_FLAGS.Bubbles */),\n                composed: !!(flags & 2 /* EVENT_FLAGS.Composed */),\n                cancelable: !!(flags & 1 /* EVENT_FLAGS.Cancellable */),\n                detail,\n            });\n        },\n    };\n};\n/**\n * Helper function to create & dispatch a custom Event on a provided target\n * @param elm the target of the Event\n * @param name the name to give the custom Event\n * @param opts options for configuring a custom Event\n * @returns the custom Event\n */\nconst emitEvent = (elm, name, opts) => {\n    const ev = plt.ce(name, opts);\n    elm.dispatchEvent(ev);\n    return ev;\n};\nconst rootAppliedStyles = /*@__PURE__*/ new WeakMap();\nconst registerStyle = (scopeId, cssText, allowCS) => {\n    let style = styles.get(scopeId);\n    if (supportsConstructableStylesheets && allowCS) {\n        style = (style || new CSSStyleSheet());\n        if (typeof style === 'string') {\n            style = cssText;\n        }\n        else {\n            style.replaceSync(cssText);\n        }\n    }\n    else {\n        style = cssText;\n    }\n    styles.set(scopeId, style);\n};\nconst addStyle = (styleContainerNode, cmpMeta, mode, hostElm) => {\n    var _a;\n    let scopeId = getScopeId(cmpMeta);\n    const style = styles.get(scopeId);\n    // if an element is NOT connected then getRootNode() will return the wrong root node\n    // so the fallback is to always use the document for the root node in those cases\n    styleContainerNode = styleContainerNode.nodeType === 11 /* NODE_TYPE.DocumentFragment */ ? styleContainerNode : doc;\n    if (style) {\n        if (typeof style === 'string') {\n            styleContainerNode = styleContainerNode.head || styleContainerNode;\n            let appliedStyles = rootAppliedStyles.get(styleContainerNode);\n            let styleElm;\n            if (!appliedStyles) {\n                rootAppliedStyles.set(styleContainerNode, (appliedStyles = new Set()));\n            }\n            if (!appliedStyles.has(scopeId)) {\n                {\n                    // TODO(STENCIL-659): Remove code implementing the CSS variable shim\n                    {\n                        styleElm = doc.createElement('style');\n                        styleElm.innerHTML = style;\n                    }\n                    // Apply CSP nonce to the style tag if it exists\n                    const nonce = (_a = plt.$nonce$) !== null && _a !== void 0 ? _a : queryNonceMetaTagContent(doc);\n                    if (nonce != null) {\n                        styleElm.setAttribute('nonce', nonce);\n                    }\n                    styleContainerNode.insertBefore(styleElm, styleContainerNode.querySelector('link'));\n                }\n                if (appliedStyles) {\n                    appliedStyles.add(scopeId);\n                }\n            }\n        }\n        else if (!styleContainerNode.adoptedStyleSheets.includes(style)) {\n            styleContainerNode.adoptedStyleSheets = [...styleContainerNode.adoptedStyleSheets, style];\n        }\n    }\n    return scopeId;\n};\nconst attachStyles = (hostRef) => {\n    const cmpMeta = hostRef.$cmpMeta$;\n    const elm = hostRef.$hostElement$;\n    const flags = cmpMeta.$flags$;\n    const endAttachStyles = createTime('attachStyles', cmpMeta.$tagName$);\n    const scopeId = addStyle(elm.shadowRoot ? elm.shadowRoot : elm.getRootNode(), cmpMeta);\n    // TODO(STENCIL-662): Remove code related to deprecated shadowDomShim field\n    if (flags & 10 /* CMP_FLAGS.needsScopedEncapsulation */) {\n        // only required when we're NOT using native shadow dom (slot)\n        // or this browser doesn't support native shadow dom\n        // and this host element was NOT created with SSR\n        // let's pick out the inner content for slot projection\n        // create a node to represent where the original\n        // content was first placed, which is useful later on\n        // DOM WRITE!!\n        elm['s-sc'] = scopeId;\n        elm.classList.add(scopeId + '-h');\n    }\n    endAttachStyles();\n};\nconst getScopeId = (cmp, mode) => 'sc-' + (cmp.$tagName$);\n/**\n * Production setAccessor() function based on Preact by\n * Jason Miller (@developit)\n * Licensed under the MIT License\n * https://github.com/developit/preact/blob/master/LICENSE\n *\n * Modified for Stencil's compiler and vdom\n */\nconst setAccessor = (elm, memberName, oldValue, newValue, isSvg, flags) => {\n    if (oldValue !== newValue) {\n        let isProp = isMemberInElement(elm, memberName);\n        let ln = memberName.toLowerCase();\n        if (memberName === 'class') {\n            const classList = elm.classList;\n            const oldClasses = parseClassList(oldValue);\n            const newClasses = parseClassList(newValue);\n            classList.remove(...oldClasses.filter((c) => c && !newClasses.includes(c)));\n            classList.add(...newClasses.filter((c) => c && !oldClasses.includes(c)));\n        }\n        else if ((!isProp ) &&\n            memberName[0] === 'o' &&\n            memberName[1] === 'n') {\n            // Event Handlers\n            // so if the member name starts with \"on\" and the 3rd characters is\n            // a capital letter, and it's not already a member on the element,\n            // then we're assuming it's an event listener\n            if (memberName[2] === '-') {\n                // on- prefixed events\n                // allows to be explicit about the dom event to listen without any magic\n                // under the hood:\n                // <my-cmp on-click> // listens for \"click\"\n                // <my-cmp on-Click> // listens for \"Click\"\n                // <my-cmp on-ionChange> // listens for \"ionChange\"\n                // <my-cmp on-EVENTS> // listens for \"EVENTS\"\n                memberName = memberName.slice(3);\n            }\n            else if (isMemberInElement(win, ln)) {\n                // standard event\n                // the JSX attribute could have been \"onMouseOver\" and the\n                // member name \"onmouseover\" is on the window's prototype\n                // so let's add the listener \"mouseover\", which is all lowercased\n                memberName = ln.slice(2);\n            }\n            else {\n                // custom event\n                // the JSX attribute could have been \"onMyCustomEvent\"\n                // so let's trim off the \"on\" prefix and lowercase the first character\n                // and add the listener \"myCustomEvent\"\n                // except for the first character, we keep the event name case\n                memberName = ln[2] + memberName.slice(3);\n            }\n            if (oldValue) {\n                plt.rel(elm, memberName, oldValue, false);\n            }\n            if (newValue) {\n                plt.ael(elm, memberName, newValue, false);\n            }\n        }\n        else {\n            // Set property if it exists and it's not a SVG\n            const isComplex = isComplexType(newValue);\n            if ((isProp || (isComplex && newValue !== null)) && !isSvg) {\n                try {\n                    if (!elm.tagName.includes('-')) {\n                        const n = newValue == null ? '' : newValue;\n                        // Workaround for Safari, moving the <input> caret when re-assigning the same valued\n                        if (memberName === 'list') {\n                            isProp = false;\n                        }\n                        else if (oldValue == null || elm[memberName] != n) {\n                            elm[memberName] = n;\n                        }\n                    }\n                    else {\n                        elm[memberName] = newValue;\n                    }\n                }\n                catch (e) { }\n            }\n            if (newValue == null || newValue === false) {\n                if (newValue !== false || elm.getAttribute(memberName) === '') {\n                    {\n                        elm.removeAttribute(memberName);\n                    }\n                }\n            }\n            else if ((!isProp || flags & 4 /* VNODE_FLAGS.isHost */ || isSvg) && !isComplex) {\n                newValue = newValue === true ? '' : newValue;\n                {\n                    elm.setAttribute(memberName, newValue);\n                }\n            }\n        }\n    }\n};\nconst parseClassListRegex = /\\s/;\nconst parseClassList = (value) => (!value ? [] : value.split(parseClassListRegex));\nconst updateElement = (oldVnode, newVnode, isSvgMode, memberName) => {\n    // if the element passed in is a shadow root, which is a document fragment\n    // then we want to be adding attrs/props to the shadow root's \"host\" element\n    // if it's not a shadow root, then we add attrs/props to the same element\n    const elm = newVnode.$elm$.nodeType === 11 /* NODE_TYPE.DocumentFragment */ && newVnode.$elm$.host\n        ? newVnode.$elm$.host\n        : newVnode.$elm$;\n    const oldVnodeAttrs = (oldVnode && oldVnode.$attrs$) || EMPTY_OBJ;\n    const newVnodeAttrs = newVnode.$attrs$ || EMPTY_OBJ;\n    {\n        // remove attributes no longer present on the vnode by setting them to undefined\n        for (memberName in oldVnodeAttrs) {\n            if (!(memberName in newVnodeAttrs)) {\n                setAccessor(elm, memberName, oldVnodeAttrs[memberName], undefined, isSvgMode, newVnode.$flags$);\n            }\n        }\n    }\n    // add new & update changed attributes\n    for (memberName in newVnodeAttrs) {\n        setAccessor(elm, memberName, oldVnodeAttrs[memberName], newVnodeAttrs[memberName], isSvgMode, newVnode.$flags$);\n    }\n};\n/**\n * Create a DOM Node corresponding to one of the children of a given VNode.\n *\n * @param oldParentVNode the parent VNode from the previous render\n * @param newParentVNode the parent VNode from the current render\n * @param childIndex the index of the VNode, in the _new_ parent node's\n * children, for which we will create a new DOM node\n * @param parentElm the parent DOM node which our new node will be a child of\n * @returns the newly created node\n */\nconst createElm = (oldParentVNode, newParentVNode, childIndex, parentElm) => {\n    // tslint:disable-next-line: prefer-const\n    const newVNode = newParentVNode.$children$[childIndex];\n    let i = 0;\n    let elm;\n    let childNode;\n    if (newVNode.$text$ !== null) {\n        // create text node\n        elm = newVNode.$elm$ = doc.createTextNode(newVNode.$text$);\n    }\n    else {\n        if (!isSvgMode) {\n            isSvgMode = newVNode.$tag$ === 'svg';\n        }\n        // create element\n        elm = newVNode.$elm$ = (doc.createElementNS(isSvgMode ? SVG_NS : HTML_NS, newVNode.$tag$)\n            );\n        if (isSvgMode && newVNode.$tag$ === 'foreignObject') {\n            isSvgMode = false;\n        }\n        // add css classes, attrs, props, listeners, etc.\n        {\n            updateElement(null, newVNode, isSvgMode);\n        }\n        if (isDef(scopeId) && elm['s-si'] !== scopeId) {\n            // if there is a scopeId and this is the initial render\n            // then let's add the scopeId as a css class\n            elm.classList.add((elm['s-si'] = scopeId));\n        }\n        if (newVNode.$children$) {\n            for (i = 0; i < newVNode.$children$.length; ++i) {\n                // create the node\n                childNode = createElm(oldParentVNode, newVNode, i);\n                // return node could have been null\n                if (childNode) {\n                    // append our new node\n                    elm.appendChild(childNode);\n                }\n            }\n        }\n        {\n            if (newVNode.$tag$ === 'svg') {\n                // Only reset the SVG context when we're exiting <svg> element\n                isSvgMode = false;\n            }\n            else if (elm.tagName === 'foreignObject') {\n                // Reenter SVG context when we're exiting <foreignObject> element\n                isSvgMode = true;\n            }\n        }\n    }\n    return elm;\n};\n/**\n * Create DOM nodes corresponding to a list of {@link d.Vnode} objects and\n * add them to the DOM in the appropriate place.\n *\n * @param parentElm the DOM node which should be used as a parent for the new\n * DOM nodes\n * @param before a child of the `parentElm` which the new children should be\n * inserted before (optional)\n * @param parentVNode the parent virtual DOM node\n * @param vnodes the new child virtual DOM nodes to produce DOM nodes for\n * @param startIdx the index in the child virtual DOM nodes at which to start\n * creating DOM nodes (inclusive)\n * @param endIdx the index in the child virtual DOM nodes at which to stop\n * creating DOM nodes (inclusive)\n */\nconst addVnodes = (parentElm, before, parentVNode, vnodes, startIdx, endIdx) => {\n    let containerElm = (parentElm);\n    let childNode;\n    if (containerElm.shadowRoot && containerElm.tagName === hostTagName) {\n        containerElm = containerElm.shadowRoot;\n    }\n    for (; startIdx <= endIdx; ++startIdx) {\n        if (vnodes[startIdx]) {\n            childNode = createElm(null, parentVNode, startIdx);\n            if (childNode) {\n                vnodes[startIdx].$elm$ = childNode;\n                containerElm.insertBefore(childNode, before);\n            }\n        }\n    }\n};\n/**\n * Remove the DOM elements corresponding to a list of {@link d.VNode} objects.\n * This can be used to, for instance, clean up after a list of children which\n * should no longer be shown.\n *\n * This function also handles some of Stencil's slot relocation logic.\n *\n * @param vnodes a list of virtual DOM nodes to remove\n * @param startIdx the index at which to start removing nodes (inclusive)\n * @param endIdx the index at which to stop removing nodes (inclusive)\n * @param vnode a VNode\n * @param elm an element\n */\nconst removeVnodes = (vnodes, startIdx, endIdx, vnode, elm) => {\n    for (; startIdx <= endIdx; ++startIdx) {\n        if ((vnode = vnodes[startIdx])) {\n            elm = vnode.$elm$;\n            // remove the vnode's element from the dom\n            elm.remove();\n        }\n    }\n};\n/**\n * Reconcile the children of a new VNode with the children of an old VNode by\n * traversing the two collections of children, identifying nodes that are\n * conserved or changed, calling out to `patch` to make any necessary\n * updates to the DOM, and rearranging DOM nodes as needed.\n *\n * The algorithm for reconciling children works by analyzing two 'windows' onto\n * the two arrays of children (`oldCh` and `newCh`). We keep track of the\n * 'windows' by storing start and end indices and references to the\n * corresponding array entries. Initially the two 'windows' are basically equal\n * to the entire array, but we progressively narrow the windows until there are\n * no children left to update by doing the following:\n *\n * 1. Skip any `null` entries at the beginning or end of the two arrays, so\n *    that if we have an initial array like the following we'll end up dealing\n *    only with a window bounded by the highlighted elements:\n *\n *    [null, null, VNode1 , ... , VNode2, null, null]\n *                 ^^^^^^         ^^^^^^\n *\n * 2. Check to see if the elements at the head and tail positions are equal\n *    across the windows. This will basically detect elements which haven't\n *    been added, removed, or changed position, i.e. if you had the following\n *    VNode elements (represented as HTML):\n *\n *    oldVNode: `<div><p><span>HEY</span></p></div>`\n *    newVNode: `<div><p><span>THERE</span></p></div>`\n *\n *    Then when comparing the children of the `<div>` tag we check the equality\n *    of the VNodes corresponding to the `<p>` tags and, since they are the\n *    same tag in the same position, we'd be able to avoid completely\n *    re-rendering the subtree under them with a new DOM element and would just\n *    call out to `patch` to handle reconciling their children and so on.\n *\n * 3. Check, for both windows, to see if the element at the beginning of the\n *    window corresponds to the element at the end of the other window. This is\n *    a heuristic which will let us identify _some_ situations in which\n *    elements have changed position, for instance it _should_ detect that the\n *    children nodes themselves have not changed but merely moved in the\n *    following example:\n *\n *    oldVNode: `<div><element-one /><element-two /></div>`\n *    newVNode: `<div><element-two /><element-one /></div>`\n *\n *    If we find cases like this then we also need to move the concrete DOM\n *    elements corresponding to the moved children to write the re-order to the\n *    DOM.\n *\n * 4. Finally, if VNodes have the `key` attribute set on them we check for any\n *    nodes in the old children which have the same key as the first element in\n *    our window on the new children. If we find such a node we handle calling\n *    out to `patch`, moving relevant DOM nodes, and so on, in accordance with\n *    what we find.\n *\n * Finally, once we've narrowed our 'windows' to the point that either of them\n * collapse (i.e. they have length 0) we then handle any remaining VNode\n * insertion or deletion that needs to happen to get a DOM state that correctly\n * reflects the new child VNodes. If, for instance, after our window on the old\n * children has collapsed we still have more nodes on the new children that\n * we haven't dealt with yet then we need to add them, or if the new children\n * collapse but we still have unhandled _old_ children then we need to make\n * sure the corresponding DOM nodes are removed.\n *\n * @param parentElm the node into which the parent VNode is rendered\n * @param oldCh the old children of the parent node\n * @param newVNode the new VNode which will replace the parent\n * @param newCh the new children of the parent node\n */\nconst updateChildren = (parentElm, oldCh, newVNode, newCh) => {\n    let oldStartIdx = 0;\n    let newStartIdx = 0;\n    let oldEndIdx = oldCh.length - 1;\n    let oldStartVnode = oldCh[0];\n    let oldEndVnode = oldCh[oldEndIdx];\n    let newEndIdx = newCh.length - 1;\n    let newStartVnode = newCh[0];\n    let newEndVnode = newCh[newEndIdx];\n    let node;\n    while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {\n        if (oldStartVnode == null) {\n            // VNode might have been moved left\n            oldStartVnode = oldCh[++oldStartIdx];\n        }\n        else if (oldEndVnode == null) {\n            oldEndVnode = oldCh[--oldEndIdx];\n        }\n        else if (newStartVnode == null) {\n            newStartVnode = newCh[++newStartIdx];\n        }\n        else if (newEndVnode == null) {\n            newEndVnode = newCh[--newEndIdx];\n        }\n        else if (isSameVnode(oldStartVnode, newStartVnode)) {\n            // if the start nodes are the same then we should patch the new VNode\n            // onto the old one, and increment our `newStartIdx` and `oldStartIdx`\n            // indices to reflect that. We don't need to move any DOM Nodes around\n            // since things are matched up in order.\n            patch(oldStartVnode, newStartVnode);\n            oldStartVnode = oldCh[++oldStartIdx];\n            newStartVnode = newCh[++newStartIdx];\n        }\n        else if (isSameVnode(oldEndVnode, newEndVnode)) {\n            // likewise, if the end nodes are the same we patch new onto old and\n            // decrement our end indices, and also likewise in this case we don't\n            // need to move any DOM Nodes.\n            patch(oldEndVnode, newEndVnode);\n            oldEndVnode = oldCh[--oldEndIdx];\n            newEndVnode = newCh[--newEndIdx];\n        }\n        else if (isSameVnode(oldStartVnode, newEndVnode)) {\n            patch(oldStartVnode, newEndVnode);\n            // We need to move the element for `oldStartVnode` into a position which\n            // will be appropriate for `newEndVnode`. For this we can use\n            // `.insertBefore` and `oldEndVnode.$elm$.nextSibling`. If there is a\n            // sibling for `oldEndVnode.$elm$` then we want to move the DOM node for\n            // `oldStartVnode` between `oldEndVnode` and it's sibling, like so:\n            //\n            // <old-start-node />\n            // <some-intervening-node />\n            // <old-end-node />\n            // <!-- ->              <-- `oldStartVnode.$elm$` should be inserted here\n            // <next-sibling />\n            //\n            // If instead `oldEndVnode.$elm$` has no sibling then we just want to put\n            // the node for `oldStartVnode` at the end of the children of\n            // `parentElm`. Luckily, `Node.nextSibling` will return `null` if there\n            // aren't any siblings, and passing `null` to `Node.insertBefore` will\n            // append it to the children of the parent element.\n            parentElm.insertBefore(oldStartVnode.$elm$, oldEndVnode.$elm$.nextSibling);\n            oldStartVnode = oldCh[++oldStartIdx];\n            newEndVnode = newCh[--newEndIdx];\n        }\n        else if (isSameVnode(oldEndVnode, newStartVnode)) {\n            patch(oldEndVnode, newStartVnode);\n            // We've already checked above if `oldStartVnode` and `newStartVnode` are\n            // the same node, so since we're here we know that they are not. Thus we\n            // can move the element for `oldEndVnode` _before_ the element for\n            // `oldStartVnode`, leaving `oldStartVnode` to be reconciled in the\n            // future.\n            parentElm.insertBefore(oldEndVnode.$elm$, oldStartVnode.$elm$);\n            oldEndVnode = oldCh[--oldEndIdx];\n            newStartVnode = newCh[++newStartIdx];\n        }\n        else {\n            {\n                // We either didn't find an element in the old children that matches\n                // the key of the first new child OR the build is not using `key`\n                // attributes at all. In either case we need to create a new element\n                // for the new node.\n                node = createElm(oldCh && oldCh[newStartIdx], newVNode, newStartIdx);\n                newStartVnode = newCh[++newStartIdx];\n            }\n            if (node) {\n                // if we created a new node then handle inserting it to the DOM\n                {\n                    oldStartVnode.$elm$.parentNode.insertBefore(node, oldStartVnode.$elm$);\n                }\n            }\n        }\n    }\n    if (oldStartIdx > oldEndIdx) {\n        // we have some more new nodes to add which don't match up with old nodes\n        addVnodes(parentElm, newCh[newEndIdx + 1] == null ? null : newCh[newEndIdx + 1].$elm$, newVNode, newCh, newStartIdx, newEndIdx);\n    }\n    else if (newStartIdx > newEndIdx) {\n        // there are nodes in the `oldCh` array which no longer correspond to nodes\n        // in the new array, so lets remove them (which entails cleaning up the\n        // relevant DOM nodes)\n        removeVnodes(oldCh, oldStartIdx, oldEndIdx);\n    }\n};\n/**\n * Compare two VNodes to determine if they are the same\n *\n * **NB**: This function is an equality _heuristic_ based on the available\n * information set on the two VNodes and can be misleading under certain\n * circumstances. In particular, if the two nodes do not have `key` attrs\n * (available under `$key$` on VNodes) then the function falls back on merely\n * checking that they have the same tag.\n *\n * So, in other words, if `key` attrs are not set on VNodes which may be\n * changing order within a `children` array or something along those lines then\n * we could obtain a false negative and then have to do needless re-rendering\n * (i.e. we'd say two VNodes aren't equal when in fact they should be).\n *\n * @param leftVNode the first VNode to check\n * @param rightVNode the second VNode to check\n * @returns whether they're equal or not\n */\nconst isSameVnode = (leftVNode, rightVNode) => {\n    // compare if two vnode to see if they're \"technically\" the same\n    // need to have the same element tag, and same key to be the same\n    if (leftVNode.$tag$ === rightVNode.$tag$) {\n        return true;\n    }\n    return false;\n};\n/**\n * Handle reconciling an outdated VNode with a new one which corresponds to\n * it. This function handles flushing updates to the DOM and reconciling the\n * children of the two nodes (if any).\n *\n * @param oldVNode an old VNode whose DOM element and children we want to update\n * @param newVNode a new VNode representing an updated version of the old one\n */\nconst patch = (oldVNode, newVNode) => {\n    const elm = (newVNode.$elm$ = oldVNode.$elm$);\n    const oldChildren = oldVNode.$children$;\n    const newChildren = newVNode.$children$;\n    const tag = newVNode.$tag$;\n    const text = newVNode.$text$;\n    if (text === null) {\n        {\n            // test if we're rendering an svg element, or still rendering nodes inside of one\n            // only add this to the when the compiler sees we're using an svg somewhere\n            isSvgMode = tag === 'svg' ? true : tag === 'foreignObject' ? false : isSvgMode;\n        }\n        {\n            if (tag === 'slot')\n                ;\n            else {\n                // either this is the first render of an element OR it's an update\n                // AND we already know it's possible it could have changed\n                // this updates the element's css classes, attrs, props, listeners, etc.\n                updateElement(oldVNode, newVNode, isSvgMode);\n            }\n        }\n        if (oldChildren !== null && newChildren !== null) {\n            // looks like there's child vnodes for both the old and new vnodes\n            // so we need to call `updateChildren` to reconcile them\n            updateChildren(elm, oldChildren, newVNode, newChildren);\n        }\n        else if (newChildren !== null) {\n            // no old child vnodes, but there are new child vnodes to add\n            if (oldVNode.$text$ !== null) {\n                // the old vnode was text, so be sure to clear it out\n                elm.textContent = '';\n            }\n            // add the new vnode children\n            addVnodes(elm, null, newVNode, newChildren, 0, newChildren.length - 1);\n        }\n        else if (oldChildren !== null) {\n            // no new child vnodes, but there are old child vnodes to remove\n            removeVnodes(oldChildren, 0, oldChildren.length - 1);\n        }\n        if (isSvgMode && tag === 'svg') {\n            isSvgMode = false;\n        }\n    }\n    else if (oldVNode.$text$ !== text) {\n        // update the text content for the text only vnode\n        // and also only if the text is different than before\n        elm.data = text;\n    }\n};\n/**\n * The main entry point for Stencil's virtual DOM-based rendering engine\n *\n * Given a {@link d.HostRef} container and some virtual DOM nodes, this\n * function will handle creating a virtual DOM tree with a single root, patching\n * the current virtual DOM tree onto an old one (if any), dealing with slot\n * relocation, and reflecting attributes.\n *\n * @param hostRef data needed to root and render the virtual DOM tree, such as\n * the DOM node into which it should be rendered.\n * @param renderFnResults the virtual DOM nodes to be rendered\n */\nconst renderVdom = (hostRef, renderFnResults) => {\n    const hostElm = hostRef.$hostElement$;\n    const cmpMeta = hostRef.$cmpMeta$;\n    const oldVNode = hostRef.$vnode$ || newVNode(null, null);\n    const rootVnode = isHost(renderFnResults) ? renderFnResults : h(null, null, renderFnResults);\n    hostTagName = hostElm.tagName;\n    if (cmpMeta.$attrsToReflect$) {\n        rootVnode.$attrs$ = rootVnode.$attrs$ || {};\n        cmpMeta.$attrsToReflect$.map(([propName, attribute]) => (rootVnode.$attrs$[attribute] = hostElm[propName]));\n    }\n    rootVnode.$tag$ = null;\n    rootVnode.$flags$ |= 4 /* VNODE_FLAGS.isHost */;\n    hostRef.$vnode$ = rootVnode;\n    rootVnode.$elm$ = oldVNode.$elm$ = (hostElm.shadowRoot || hostElm );\n    {\n        scopeId = hostElm['s-sc'];\n    }\n    // synchronous patch\n    patch(oldVNode, rootVnode);\n};\nconst attachToAncestor = (hostRef, ancestorComponent) => {\n    if (ancestorComponent && !hostRef.$onRenderResolve$ && ancestorComponent['s-p']) {\n        ancestorComponent['s-p'].push(new Promise((r) => (hostRef.$onRenderResolve$ = r)));\n    }\n};\nconst scheduleUpdate = (hostRef, isInitialLoad) => {\n    {\n        hostRef.$flags$ |= 16 /* HOST_FLAGS.isQueuedForUpdate */;\n    }\n    if (hostRef.$flags$ & 4 /* HOST_FLAGS.isWaitingForChildren */) {\n        hostRef.$flags$ |= 512 /* HOST_FLAGS.needsRerender */;\n        return;\n    }\n    attachToAncestor(hostRef, hostRef.$ancestorComponent$);\n    // there is no ancestor component or the ancestor component\n    // has already fired off its lifecycle update then\n    // fire off the initial update\n    const dispatch = () => dispatchHooks(hostRef, isInitialLoad);\n    return writeTask(dispatch) ;\n};\nconst dispatchHooks = (hostRef, isInitialLoad) => {\n    const endSchedule = createTime('scheduleUpdate', hostRef.$cmpMeta$.$tagName$);\n    const instance = hostRef.$lazyInstance$ ;\n    let promise;\n    if (isInitialLoad) {\n        {\n            hostRef.$flags$ |= 256 /* HOST_FLAGS.isListenReady */;\n            if (hostRef.$queuedListeners$) {\n                hostRef.$queuedListeners$.map(([methodName, event]) => safeCall(instance, methodName, event));\n                hostRef.$queuedListeners$ = null;\n            }\n        }\n    }\n    endSchedule();\n    return then(promise, () => updateComponent(hostRef, instance, isInitialLoad));\n};\nconst updateComponent = async (hostRef, instance, isInitialLoad) => {\n    // updateComponent\n    const elm = hostRef.$hostElement$;\n    const endUpdate = createTime('update', hostRef.$cmpMeta$.$tagName$);\n    const rc = elm['s-rc'];\n    if (isInitialLoad) {\n        // DOM WRITE!\n        attachStyles(hostRef);\n    }\n    const endRender = createTime('render', hostRef.$cmpMeta$.$tagName$);\n    {\n        callRender(hostRef, instance);\n    }\n    if (rc) {\n        // ok, so turns out there are some child host elements\n        // waiting on this parent element to load\n        // let's fire off all update callbacks waiting\n        rc.map((cb) => cb());\n        elm['s-rc'] = undefined;\n    }\n    endRender();\n    endUpdate();\n    {\n        const childrenPromises = elm['s-p'];\n        const postUpdate = () => postUpdateComponent(hostRef);\n        if (childrenPromises.length === 0) {\n            postUpdate();\n        }\n        else {\n            Promise.all(childrenPromises).then(postUpdate);\n            hostRef.$flags$ |= 4 /* HOST_FLAGS.isWaitingForChildren */;\n            childrenPromises.length = 0;\n        }\n    }\n};\nconst callRender = (hostRef, instance, elm) => {\n    try {\n        instance = instance.render() ;\n        {\n            hostRef.$flags$ &= ~16 /* HOST_FLAGS.isQueuedForUpdate */;\n        }\n        {\n            hostRef.$flags$ |= 2 /* HOST_FLAGS.hasRendered */;\n        }\n        {\n            {\n                // looks like we've got child nodes to render into this host element\n                // or we need to update the css class/attrs on the host element\n                // DOM WRITE!\n                {\n                    renderVdom(hostRef, instance);\n                }\n            }\n        }\n    }\n    catch (e) {\n        consoleError(e, hostRef.$hostElement$);\n    }\n    return null;\n};\nconst postUpdateComponent = (hostRef) => {\n    const tagName = hostRef.$cmpMeta$.$tagName$;\n    const elm = hostRef.$hostElement$;\n    const endPostUpdate = createTime('postUpdate', tagName);\n    const instance = hostRef.$lazyInstance$ ;\n    const ancestorComponent = hostRef.$ancestorComponent$;\n    if (!(hostRef.$flags$ & 64 /* HOST_FLAGS.hasLoadedComponent */)) {\n        hostRef.$flags$ |= 64 /* HOST_FLAGS.hasLoadedComponent */;\n        {\n            // DOM WRITE!\n            addHydratedFlag(elm);\n        }\n        {\n            safeCall(instance, 'componentDidLoad');\n        }\n        endPostUpdate();\n        {\n            hostRef.$onReadyResolve$(elm);\n            if (!ancestorComponent) {\n                appDidLoad();\n            }\n        }\n    }\n    else {\n        endPostUpdate();\n    }\n    // load events fire from bottom to top\n    // the deepest elements load first then bubbles up\n    {\n        if (hostRef.$onRenderResolve$) {\n            hostRef.$onRenderResolve$();\n            hostRef.$onRenderResolve$ = undefined;\n        }\n        if (hostRef.$flags$ & 512 /* HOST_FLAGS.needsRerender */) {\n            nextTick(() => scheduleUpdate(hostRef, false));\n        }\n        hostRef.$flags$ &= ~(4 /* HOST_FLAGS.isWaitingForChildren */ | 512 /* HOST_FLAGS.needsRerender */);\n    }\n    // ( •_•)\n    // ( •_•)>⌐■-■\n    // (⌐■_■)\n};\nconst appDidLoad = (who) => {\n    // on appload\n    // we have finish the first big initial render\n    {\n        addHydratedFlag(doc.documentElement);\n    }\n    nextTick(() => emitEvent(win, 'appload', { detail: { namespace: NAMESPACE } }));\n};\nconst safeCall = (instance, method, arg) => {\n    if (instance && instance[method]) {\n        try {\n            return instance[method](arg);\n        }\n        catch (e) {\n            consoleError(e);\n        }\n    }\n    return undefined;\n};\nconst then = (promise, thenFn) => {\n    return promise && promise.then ? promise.then(thenFn) : thenFn();\n};\nconst addHydratedFlag = (elm) => elm.classList.add('hydrated')\n    ;\nconst getValue = (ref, propName) => getHostRef(ref).$instanceValues$.get(propName);\nconst setValue = (ref, propName, newVal, cmpMeta) => {\n    // check our new property value against our internal value\n    const hostRef = getHostRef(ref);\n    const elm = hostRef.$hostElement$ ;\n    const oldVal = hostRef.$instanceValues$.get(propName);\n    const flags = hostRef.$flags$;\n    const instance = hostRef.$lazyInstance$ ;\n    newVal = parsePropertyValue(newVal, cmpMeta.$members$[propName][0]);\n    // explicitly check for NaN on both sides, as `NaN === NaN` is always false\n    const areBothNaN = Number.isNaN(oldVal) && Number.isNaN(newVal);\n    const didValueChange = newVal !== oldVal && !areBothNaN;\n    if ((!(flags & 8 /* HOST_FLAGS.isConstructingInstance */) || oldVal === undefined) && didValueChange) {\n        // gadzooks! the property's value has changed!!\n        // set our new value!\n        hostRef.$instanceValues$.set(propName, newVal);\n        if (instance) {\n            // get an array of method names of watch functions to call\n            if (cmpMeta.$watchers$ && flags & 128 /* HOST_FLAGS.isWatchReady */) {\n                const watchMethods = cmpMeta.$watchers$[propName];\n                if (watchMethods) {\n                    // this instance is watching for when this property changed\n                    watchMethods.map((watchMethodName) => {\n                        try {\n                            // fire off each of the watch methods that are watching this property\n                            instance[watchMethodName](newVal, oldVal, propName);\n                        }\n                        catch (e) {\n                            consoleError(e, elm);\n                        }\n                    });\n                }\n            }\n            if ((flags & (2 /* HOST_FLAGS.hasRendered */ | 16 /* HOST_FLAGS.isQueuedForUpdate */)) === 2 /* HOST_FLAGS.hasRendered */) {\n                // looks like this value actually changed, so we've got work to do!\n                // but only if we've already rendered, otherwise just chill out\n                // queue that we need to do an update, but don't worry about queuing\n                // up millions cuz this function ensures it only runs once\n                scheduleUpdate(hostRef, false);\n            }\n        }\n    }\n};\n/**\n * Attach a series of runtime constructs to a compiled Stencil component\n * constructor, including getters and setters for the `@Prop` and `@State`\n * decorators, callbacks for when attributes change, and so on.\n *\n * @param Cstr the constructor for a component that we need to process\n * @param cmpMeta metadata collected previously about the component\n * @param flags a number used to store a series of bit flags\n * @returns a reference to the same constructor passed in (but now mutated)\n */\nconst proxyComponent = (Cstr, cmpMeta, flags) => {\n    if (cmpMeta.$members$) {\n        if (Cstr.watchers) {\n            cmpMeta.$watchers$ = Cstr.watchers;\n        }\n        // It's better to have a const than two Object.entries()\n        const members = Object.entries(cmpMeta.$members$);\n        const prototype = Cstr.prototype;\n        members.map(([memberName, [memberFlags]]) => {\n            if ((memberFlags & 31 /* MEMBER_FLAGS.Prop */ ||\n                    ((flags & 2 /* PROXY_FLAGS.proxyState */) && memberFlags & 32 /* MEMBER_FLAGS.State */))) {\n                // proxyComponent - prop\n                Object.defineProperty(prototype, memberName, {\n                    get() {\n                        // proxyComponent, get value\n                        return getValue(this, memberName);\n                    },\n                    set(newValue) {\n                        // proxyComponent, set value\n                        setValue(this, memberName, newValue, cmpMeta);\n                    },\n                    configurable: true,\n                    enumerable: true,\n                });\n            }\n        });\n        if ((flags & 1 /* PROXY_FLAGS.isElementConstructor */)) {\n            const attrNameToPropName = new Map();\n            prototype.attributeChangedCallback = function (attrName, _oldValue, newValue) {\n                plt.jmp(() => {\n                    const propName = attrNameToPropName.get(attrName);\n                    //  In a web component lifecycle the attributeChangedCallback runs prior to connectedCallback\n                    //  in the case where an attribute was set inline.\n                    //  ```html\n                    //    <my-component some-attribute=\"some-value\"></my-component>\n                    //  ```\n                    //\n                    //  There is an edge case where a developer sets the attribute inline on a custom element and then\n                    //  programmatically changes it before it has been upgraded as shown below:\n                    //\n                    //  ```html\n                    //    <!-- this component has _not_ been upgraded yet -->\n                    //    <my-component id=\"test\" some-attribute=\"some-value\"></my-component>\n                    //    <script>\n                    //      // grab non-upgraded component\n                    //      el = document.querySelector(\"#test\");\n                    //      el.someAttribute = \"another-value\";\n                    //      // upgrade component\n                    //      customElements.define('my-component', MyComponent);\n                    //    </script>\n                    //  ```\n                    //  In this case if we do not unshadow here and use the value of the shadowing property, attributeChangedCallback\n                    //  will be called with `newValue = \"some-value\"` and will set the shadowed property (this.someAttribute = \"another-value\")\n                    //  to the value that was set inline i.e. \"some-value\" from above example. When\n                    //  the connectedCallback attempts to unshadow it will use \"some-value\" as the initial value rather than \"another-value\"\n                    //\n                    //  The case where the attribute was NOT set inline but was not set programmatically shall be handled/unshadowed\n                    //  by connectedCallback as this attributeChangedCallback will not fire.\n                    //\n                    //  https://developers.google.com/web/fundamentals/web-components/best-practices#lazy-properties\n                    //\n                    //  TODO(STENCIL-16) we should think about whether or not we actually want to be reflecting the attributes to\n                    //  properties here given that this goes against best practices outlined here\n                    //  https://developers.google.com/web/fundamentals/web-components/best-practices#avoid-reentrancy\n                    if (this.hasOwnProperty(propName)) {\n                        newValue = this[propName];\n                        delete this[propName];\n                    }\n                    else if (prototype.hasOwnProperty(propName) &&\n                        typeof this[propName] === 'number' &&\n                        this[propName] == newValue) {\n                        // if the propName exists on the prototype of `Cstr`, this update may be a result of Stencil using native\n                        // APIs to reflect props as attributes. Calls to `setAttribute(someElement, propName)` will result in\n                        // `propName` to be converted to a `DOMString`, which may not be what we want for other primitive props.\n                        return;\n                    }\n                    this[propName] = newValue === null && typeof this[propName] === 'boolean' ? false : newValue;\n                });\n            };\n            // create an array of attributes to observe\n            // and also create a map of html attribute name to js property name\n            Cstr.observedAttributes = members\n                .filter(([_, m]) => m[0] & 15 /* MEMBER_FLAGS.HasAttribute */) // filter to only keep props that should match attributes\n                .map(([propName, m]) => {\n                const attrName = m[1] || propName;\n                attrNameToPropName.set(attrName, propName);\n                if (m[0] & 512 /* MEMBER_FLAGS.ReflectAttr */) {\n                    cmpMeta.$attrsToReflect$.push([propName, attrName]);\n                }\n                return attrName;\n            });\n        }\n    }\n    return Cstr;\n};\nconst initializeComponent = async (elm, hostRef, cmpMeta, hmrVersionId, Cstr) => {\n    // initializeComponent\n    if ((hostRef.$flags$ & 32 /* HOST_FLAGS.hasInitializedComponent */) === 0) {\n        {\n            // we haven't initialized this element yet\n            hostRef.$flags$ |= 32 /* HOST_FLAGS.hasInitializedComponent */;\n            // lazy loaded components\n            // request the component's implementation to be\n            // wired up with the host element\n            Cstr = loadModule(cmpMeta);\n            if (Cstr.then) {\n                // Await creates a micro-task avoid if possible\n                const endLoad = uniqueTime();\n                Cstr = await Cstr;\n                endLoad();\n            }\n            if (!Cstr.isProxied) {\n                // we've never proxied this Constructor before\n                // let's add the getters/setters to its prototype before\n                // the first time we create an instance of the implementation\n                {\n                    cmpMeta.$watchers$ = Cstr.watchers;\n                }\n                proxyComponent(Cstr, cmpMeta, 2 /* PROXY_FLAGS.proxyState */);\n                Cstr.isProxied = true;\n            }\n            const endNewInstance = createTime('createInstance', cmpMeta.$tagName$);\n            // ok, time to construct the instance\n            // but let's keep track of when we start and stop\n            // so that the getters/setters don't incorrectly step on data\n            {\n                hostRef.$flags$ |= 8 /* HOST_FLAGS.isConstructingInstance */;\n            }\n            // construct the lazy-loaded component implementation\n            // passing the hostRef is very important during\n            // construction in order to directly wire together the\n            // host element and the lazy-loaded instance\n            try {\n                new Cstr(hostRef);\n            }\n            catch (e) {\n                consoleError(e);\n            }\n            {\n                hostRef.$flags$ &= ~8 /* HOST_FLAGS.isConstructingInstance */;\n            }\n            {\n                hostRef.$flags$ |= 128 /* HOST_FLAGS.isWatchReady */;\n            }\n            endNewInstance();\n            fireConnectedCallback(hostRef.$lazyInstance$);\n        }\n        if (Cstr.style) {\n            // this component has styles but we haven't registered them yet\n            let style = Cstr.style;\n            const scopeId = getScopeId(cmpMeta);\n            if (!styles.has(scopeId)) {\n                const endRegisterStyles = createTime('registerStyles', cmpMeta.$tagName$);\n                registerStyle(scopeId, style, !!(cmpMeta.$flags$ & 1 /* CMP_FLAGS.shadowDomEncapsulation */));\n                endRegisterStyles();\n            }\n        }\n    }\n    // we've successfully created a lazy instance\n    const ancestorComponent = hostRef.$ancestorComponent$;\n    const schedule = () => scheduleUpdate(hostRef, true);\n    if (ancestorComponent && ancestorComponent['s-rc']) {\n        // this is the initial load and this component it has an ancestor component\n        // but the ancestor component has NOT fired its will update lifecycle yet\n        // so let's just cool our jets and wait for the ancestor to continue first\n        // this will get fired off when the ancestor component\n        // finally gets around to rendering its lazy self\n        // fire off the initial update\n        ancestorComponent['s-rc'].push(schedule);\n    }\n    else {\n        schedule();\n    }\n};\nconst fireConnectedCallback = (instance) => {\n    {\n        safeCall(instance, 'connectedCallback');\n    }\n};\nconst connectedCallback = (elm) => {\n    if ((plt.$flags$ & 1 /* PLATFORM_FLAGS.isTmpDisconnected */) === 0) {\n        const hostRef = getHostRef(elm);\n        const cmpMeta = hostRef.$cmpMeta$;\n        const endConnected = createTime('connectedCallback', cmpMeta.$tagName$);\n        if (!(hostRef.$flags$ & 1 /* HOST_FLAGS.hasConnected */)) {\n            // first time this component has connected\n            hostRef.$flags$ |= 1 /* HOST_FLAGS.hasConnected */;\n            {\n                // find the first ancestor component (if there is one) and register\n                // this component as one of the actively loading child components for its ancestor\n                let ancestorComponent = elm;\n                while ((ancestorComponent = ancestorComponent.parentNode || ancestorComponent.host)) {\n                    // climb up the ancestors looking for the first\n                    // component that hasn't finished its lifecycle update yet\n                    if (ancestorComponent['s-p']) {\n                        // we found this components first ancestor component\n                        // keep a reference to this component's ancestor component\n                        attachToAncestor(hostRef, (hostRef.$ancestorComponent$ = ancestorComponent));\n                        break;\n                    }\n                }\n            }\n            // Lazy properties\n            // https://developers.google.com/web/fundamentals/web-components/best-practices#lazy-properties\n            if (cmpMeta.$members$) {\n                Object.entries(cmpMeta.$members$).map(([memberName, [memberFlags]]) => {\n                    if (memberFlags & 31 /* MEMBER_FLAGS.Prop */ && elm.hasOwnProperty(memberName)) {\n                        const value = elm[memberName];\n                        delete elm[memberName];\n                        elm[memberName] = value;\n                    }\n                });\n            }\n            {\n                initializeComponent(elm, hostRef, cmpMeta);\n            }\n        }\n        else {\n            // not the first time this has connected\n            // reattach any event listeners to the host\n            // since they would have been removed when disconnected\n            addHostEventListeners(elm, hostRef, cmpMeta.$listeners$);\n            // fire off connectedCallback() on component instance\n            fireConnectedCallback(hostRef.$lazyInstance$);\n        }\n        endConnected();\n    }\n};\nconst disconnectedCallback = (elm) => {\n    if ((plt.$flags$ & 1 /* PLATFORM_FLAGS.isTmpDisconnected */) === 0) {\n        const hostRef = getHostRef(elm);\n        const instance = hostRef.$lazyInstance$ ;\n        {\n            if (hostRef.$rmListeners$) {\n                hostRef.$rmListeners$.map((rmListener) => rmListener());\n                hostRef.$rmListeners$ = undefined;\n            }\n        }\n        {\n            safeCall(instance, 'disconnectedCallback');\n        }\n    }\n};\nconst bootstrapLazy = (lazyBundles, options = {}) => {\n    var _a;\n    const endBootstrap = createTime();\n    const cmpTags = [];\n    const exclude = options.exclude || [];\n    const customElements = win.customElements;\n    const head = doc.head;\n    const metaCharset = /*@__PURE__*/ head.querySelector('meta[charset]');\n    const visibilityStyle = /*@__PURE__*/ doc.createElement('style');\n    const deferredConnectedCallbacks = [];\n    let appLoadFallback;\n    let isBootstrapping = true;\n    Object.assign(plt, options);\n    plt.$resourcesUrl$ = new URL(options.resourcesUrl || './', doc.baseURI).href;\n    lazyBundles.map((lazyBundle) => {\n        lazyBundle[1].map((compactMeta) => {\n            const cmpMeta = {\n                $flags$: compactMeta[0],\n                $tagName$: compactMeta[1],\n                $members$: compactMeta[2],\n                $listeners$: compactMeta[3],\n            };\n            {\n                cmpMeta.$members$ = compactMeta[2];\n            }\n            {\n                cmpMeta.$listeners$ = compactMeta[3];\n            }\n            {\n                cmpMeta.$attrsToReflect$ = [];\n            }\n            {\n                cmpMeta.$watchers$ = {};\n            }\n            const tagName = cmpMeta.$tagName$;\n            const HostElement = class extends HTMLElement {\n                // StencilLazyHost\n                constructor(self) {\n                    // @ts-ignore\n                    super(self);\n                    self = this;\n                    registerHost(self, cmpMeta);\n                    if (cmpMeta.$flags$ & 1 /* CMP_FLAGS.shadowDomEncapsulation */) {\n                        // this component is using shadow dom\n                        // and this browser supports shadow dom\n                        // add the read-only property \"shadowRoot\" to the host element\n                        // adding the shadow root build conditionals to minimize runtime\n                        {\n                            {\n                                self.attachShadow({ mode: 'open' });\n                            }\n                        }\n                    }\n                }\n                connectedCallback() {\n                    if (appLoadFallback) {\n                        clearTimeout(appLoadFallback);\n                        appLoadFallback = null;\n                    }\n                    if (isBootstrapping) {\n                        // connectedCallback will be processed once all components have been registered\n                        deferredConnectedCallbacks.push(this);\n                    }\n                    else {\n                        plt.jmp(() => connectedCallback(this));\n                    }\n                }\n                disconnectedCallback() {\n                    plt.jmp(() => disconnectedCallback(this));\n                }\n                componentOnReady() {\n                    return getHostRef(this).$onReadyPromise$;\n                }\n            };\n            cmpMeta.$lazyBundleId$ = lazyBundle[0];\n            if (!exclude.includes(tagName) && !customElements.get(tagName)) {\n                cmpTags.push(tagName);\n                customElements.define(tagName, proxyComponent(HostElement, cmpMeta, 1 /* PROXY_FLAGS.isElementConstructor */));\n            }\n        });\n    });\n    {\n        visibilityStyle.innerHTML = cmpTags + HYDRATED_CSS;\n        visibilityStyle.setAttribute('data-styles', '');\n        // Apply CSP nonce to the style tag if it exists\n        const nonce = (_a = plt.$nonce$) !== null && _a !== void 0 ? _a : queryNonceMetaTagContent(doc);\n        if (nonce != null) {\n            visibilityStyle.setAttribute('nonce', nonce);\n        }\n        head.insertBefore(visibilityStyle, metaCharset ? metaCharset.nextSibling : head.firstChild);\n    }\n    // Process deferred connectedCallbacks now all components have been registered\n    isBootstrapping = false;\n    if (deferredConnectedCallbacks.length) {\n        deferredConnectedCallbacks.map((host) => host.connectedCallback());\n    }\n    else {\n        {\n            plt.jmp(() => (appLoadFallback = setTimeout(appDidLoad, 30)));\n        }\n    }\n    // Fallback appLoad event\n    endBootstrap();\n};\nconst addHostEventListeners = (elm, hostRef, listeners, attachParentListeners) => {\n    if (listeners) {\n        listeners.map(([flags, name, method]) => {\n            const target = elm;\n            const handler = hostListenerProxy(hostRef, method);\n            const opts = hostListenerOpts(flags);\n            plt.ael(target, name, handler, opts);\n            (hostRef.$rmListeners$ = hostRef.$rmListeners$ || []).push(() => plt.rel(target, name, handler, opts));\n        });\n    }\n};\nconst hostListenerProxy = (hostRef, methodName) => (ev) => {\n    try {\n        {\n            if (hostRef.$flags$ & 256 /* HOST_FLAGS.isListenReady */) {\n                // instance is ready, let's call it's member method for this event\n                hostRef.$lazyInstance$[methodName](ev);\n            }\n            else {\n                (hostRef.$queuedListeners$ = hostRef.$queuedListeners$ || []).push([methodName, ev]);\n            }\n        }\n    }\n    catch (e) {\n        consoleError(e);\n    }\n};\n// prettier-ignore\nconst hostListenerOpts = (flags) => (flags & 2 /* LISTENER_FLAGS.Capture */) !== 0;\n/**\n * Assigns the given value to the nonce property on the runtime platform object.\n * During runtime, this value is used to set the nonce attribute on all dynamically created script and style tags.\n * @param nonce The value to be assigned to the platform nonce property.\n * @returns void\n */\nconst setNonce = (nonce) => (plt.$nonce$ = nonce);\nconst hostRefs = /*@__PURE__*/ new WeakMap();\nconst getHostRef = (ref) => hostRefs.get(ref);\nconst registerInstance = (lazyInstance, hostRef) => hostRefs.set((hostRef.$lazyInstance$ = lazyInstance), hostRef);\nconst registerHost = (elm, cmpMeta) => {\n    const hostRef = {\n        $flags$: 0,\n        $hostElement$: elm,\n        $cmpMeta$: cmpMeta,\n        $instanceValues$: new Map(),\n    };\n    {\n        hostRef.$onReadyPromise$ = new Promise((r) => (hostRef.$onReadyResolve$ = r));\n        elm['s-p'] = [];\n        elm['s-rc'] = [];\n    }\n    addHostEventListeners(elm, hostRef, cmpMeta.$listeners$);\n    return hostRefs.set(elm, hostRef);\n};\nconst isMemberInElement = (elm, memberName) => memberName in elm;\nconst consoleError = (e, el) => (0, console.error)(e, el);\nconst cmpModules = /*@__PURE__*/ new Map();\nconst loadModule = (cmpMeta, hostRef, hmrVersionId) => {\n    // loadModuleImport\n    const exportName = cmpMeta.$tagName$.replace(/-/g, '_');\n    const bundleId = cmpMeta.$lazyBundleId$;\n    const module = cmpModules.get(bundleId) ;\n    if (module) {\n        return module[exportName];\n    }\n    /*!__STENCIL_STATIC_IMPORT_SWITCH__*/\n    return import(\n    /* @vite-ignore */\n    /* webpackInclude: /\\.entry\\.js$/ */\n    /* webpackExclude: /\\.system\\.entry\\.js$/ */\n    /* webpackMode: \"lazy\" */\n    `./${bundleId}.entry.js${''}`).then((importedModule) => {\n        {\n            cmpModules.set(bundleId, importedModule);\n        }\n        return importedModule[exportName];\n    }, consoleError);\n};\nconst styles = /*@__PURE__*/ new Map();\nconst win = typeof window !== 'undefined' ? window : {};\nconst doc = win.document || { head: {} };\nconst plt = {\n    $flags$: 0,\n    $resourcesUrl$: '',\n    jmp: (h) => h(),\n    raf: (h) => requestAnimationFrame(h),\n    ael: (el, eventName, listener, opts) => el.addEventListener(eventName, listener, opts),\n    rel: (el, eventName, listener, opts) => el.removeEventListener(eventName, listener, opts),\n    ce: (eventName, opts) => new CustomEvent(eventName, opts),\n};\nconst promiseResolve = (v) => Promise.resolve(v);\nconst supportsConstructableStylesheets = /*@__PURE__*/ (() => {\n        try {\n            new CSSStyleSheet();\n            return typeof new CSSStyleSheet().replaceSync === 'function';\n        }\n        catch (e) { }\n        return false;\n    })()\n    ;\nconst queueDomReads = [];\nconst queueDomWrites = [];\nconst queueTask = (queue, write) => (cb) => {\n    queue.push(cb);\n    if (!queuePending) {\n        queuePending = true;\n        if (write && plt.$flags$ & 4 /* PLATFORM_FLAGS.queueSync */) {\n            nextTick(flush);\n        }\n        else {\n            plt.raf(flush);\n        }\n    }\n};\nconst consume = (queue) => {\n    for (let i = 0; i < queue.length; i++) {\n        try {\n            queue[i](performance.now());\n        }\n        catch (e) {\n            consoleError(e);\n        }\n    }\n    queue.length = 0;\n};\nconst flush = () => {\n    // always force a bunch of medium callbacks to run, but still have\n    // a throttle on how many can run in a certain time\n    // DOM READS!!!\n    consume(queueDomReads);\n    // DOM WRITES!!!\n    {\n        consume(queueDomWrites);\n        if ((queuePending = queueDomReads.length > 0)) {\n            // still more to do yet, but we've run out of time\n            // let's let this thing cool off and try again in the next tick\n            plt.raf(flush);\n        }\n    }\n};\nconst nextTick = /*@__PURE__*/ (cb) => promiseResolve().then(cb);\nconst writeTask = /*@__PURE__*/ queueTask(queueDomWrites, true);\n\nexport { Host as H, bootstrapLazy as b, createEvent as c, getElement as g, h, promiseResolve as p, registerInstance as r, setNonce as s };\n\n//# sourceMappingURL=index-b9f5f8f6.js.map","\n(function(){if(\"undefined\"!==typeof window&&void 0!==window.Reflect&&void 0!==window.customElements){var a=HTMLElement;window.HTMLElement=function(){return Reflect.construct(a,[],this.constructor)};HTMLElement.prototype=a.prototype;HTMLElement.prototype.constructor=HTMLElement;Object.setPrototypeOf(HTMLElement,a)}})();\nexport * from '../dist/esm/polyfills/index.js';\nexport * from '../dist/esm/loader.js';\n"],"file":"assets/index-abe37881.js"}